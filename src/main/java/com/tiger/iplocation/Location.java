/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.tiger.iplocation;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Location extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Location\",\"namespace\":\"com.tiger.iplocation\",\"fields\":[{\"name\":\"geo_code\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"-\"},{\"name\":\"country\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"-\"},{\"name\":\"province\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"-\"},{\"name\":\"region\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"-\"},{\"name\":\"city\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"-\"},{\"name\":\"city_level\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"-\"},{\"name\":\"isp\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"-\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.String geo_code;
  @Deprecated public java.lang.String country;
  @Deprecated public java.lang.String province;
  @Deprecated public java.lang.String region;
  @Deprecated public java.lang.String city;
  @Deprecated public java.lang.String city_level;
  @Deprecated public java.lang.String isp;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Location() {}

  /**
   * All-args constructor.
   */
  public Location(java.lang.String geo_code, java.lang.String country, java.lang.String province, java.lang.String region, java.lang.String city, java.lang.String city_level, java.lang.String isp) {
    this.geo_code = geo_code;
    this.country = country;
    this.province = province;
    this.region = region;
    this.city = city;
    this.city_level = city_level;
    this.isp = isp;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return geo_code;
    case 1: return country;
    case 2: return province;
    case 3: return region;
    case 4: return city;
    case 5: return city_level;
    case 6: return isp;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: geo_code = (java.lang.String)value$; break;
    case 1: country = (java.lang.String)value$; break;
    case 2: province = (java.lang.String)value$; break;
    case 3: region = (java.lang.String)value$; break;
    case 4: city = (java.lang.String)value$; break;
    case 5: city_level = (java.lang.String)value$; break;
    case 6: isp = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'geo_code' field.
   */
  public java.lang.String getGeoCode() {
    return geo_code;
  }

  /**
   * Sets the value of the 'geo_code' field.
   * @param value the value to set.
   */
  public void setGeoCode(java.lang.String value) {
    this.geo_code = value;
  }

  /**
   * Gets the value of the 'country' field.
   */
  public java.lang.String getCountry() {
    return country;
  }

  /**
   * Sets the value of the 'country' field.
   * @param value the value to set.
   */
  public void setCountry(java.lang.String value) {
    this.country = value;
  }

  /**
   * Gets the value of the 'province' field.
   */
  public java.lang.String getProvince() {
    return province;
  }

  /**
   * Sets the value of the 'province' field.
   * @param value the value to set.
   */
  public void setProvince(java.lang.String value) {
    this.province = value;
  }

  /**
   * Gets the value of the 'region' field.
   */
  public java.lang.String getRegion() {
    return region;
  }

  /**
   * Sets the value of the 'region' field.
   * @param value the value to set.
   */
  public void setRegion(java.lang.String value) {
    this.region = value;
  }

  /**
   * Gets the value of the 'city' field.
   */
  public java.lang.String getCity() {
    return city;
  }

  /**
   * Sets the value of the 'city' field.
   * @param value the value to set.
   */
  public void setCity(java.lang.String value) {
    this.city = value;
  }

  /**
   * Gets the value of the 'city_level' field.
   */
  public java.lang.String getCityLevel() {
    return city_level;
  }

  /**
   * Sets the value of the 'city_level' field.
   * @param value the value to set.
   */
  public void setCityLevel(java.lang.String value) {
    this.city_level = value;
  }

  /**
   * Gets the value of the 'isp' field.
   */
  public java.lang.String getIsp() {
    return isp;
  }

  /**
   * Sets the value of the 'isp' field.
   * @param value the value to set.
   */
  public void setIsp(java.lang.String value) {
    this.isp = value;
  }

  /** Creates a new Location RecordBuilder */
  public static com.tiger.iplocation.Location.Builder newBuilder() {
    return new com.tiger.iplocation.Location.Builder();
  }
  
  /** Creates a new Location RecordBuilder by copying an existing Builder */
  public static com.tiger.iplocation.Location.Builder newBuilder(com.tiger.iplocation.Location.Builder other) {
    return new com.tiger.iplocation.Location.Builder(other);
  }
  
  /** Creates a new Location RecordBuilder by copying an existing Location instance */
  public static com.tiger.iplocation.Location.Builder newBuilder(com.tiger.iplocation.Location other) {
    return new com.tiger.iplocation.Location.Builder(other);
  }
  
  /**
   * RecordBuilder for Location instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Location>
    implements org.apache.avro.data.RecordBuilder<Location> {

    private java.lang.String geo_code;
    private java.lang.String country;
    private java.lang.String province;
    private java.lang.String region;
    private java.lang.String city;
    private java.lang.String city_level;
    private java.lang.String isp;

    /** Creates a new Builder */
    private Builder() {
      super(com.tiger.iplocation.Location.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.tiger.iplocation.Location.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.geo_code)) {
        this.geo_code = data().deepCopy(fields()[0].schema(), other.geo_code);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.country)) {
        this.country = data().deepCopy(fields()[1].schema(), other.country);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.province)) {
        this.province = data().deepCopy(fields()[2].schema(), other.province);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.region)) {
        this.region = data().deepCopy(fields()[3].schema(), other.region);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.city)) {
        this.city = data().deepCopy(fields()[4].schema(), other.city);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.city_level)) {
        this.city_level = data().deepCopy(fields()[5].schema(), other.city_level);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.isp)) {
        this.isp = data().deepCopy(fields()[6].schema(), other.isp);
        fieldSetFlags()[6] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Location instance */
    private Builder(com.tiger.iplocation.Location other) {
            super(com.tiger.iplocation.Location.SCHEMA$);
      if (isValidValue(fields()[0], other.geo_code)) {
        this.geo_code = data().deepCopy(fields()[0].schema(), other.geo_code);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.country)) {
        this.country = data().deepCopy(fields()[1].schema(), other.country);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.province)) {
        this.province = data().deepCopy(fields()[2].schema(), other.province);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.region)) {
        this.region = data().deepCopy(fields()[3].schema(), other.region);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.city)) {
        this.city = data().deepCopy(fields()[4].schema(), other.city);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.city_level)) {
        this.city_level = data().deepCopy(fields()[5].schema(), other.city_level);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.isp)) {
        this.isp = data().deepCopy(fields()[6].schema(), other.isp);
        fieldSetFlags()[6] = true;
      }
    }

    /** Gets the value of the 'geo_code' field */
    public java.lang.String getGeoCode() {
      return geo_code;
    }
    
    /** Sets the value of the 'geo_code' field */
    public com.tiger.iplocation.Location.Builder setGeoCode(java.lang.String value) {
      validate(fields()[0], value);
      this.geo_code = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'geo_code' field has been set */
    public boolean hasGeoCode() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'geo_code' field */
    public com.tiger.iplocation.Location.Builder clearGeoCode() {
      geo_code = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'country' field */
    public java.lang.String getCountry() {
      return country;
    }
    
    /** Sets the value of the 'country' field */
    public com.tiger.iplocation.Location.Builder setCountry(java.lang.String value) {
      validate(fields()[1], value);
      this.country = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'country' field has been set */
    public boolean hasCountry() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'country' field */
    public com.tiger.iplocation.Location.Builder clearCountry() {
      country = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'province' field */
    public java.lang.String getProvince() {
      return province;
    }
    
    /** Sets the value of the 'province' field */
    public com.tiger.iplocation.Location.Builder setProvince(java.lang.String value) {
      validate(fields()[2], value);
      this.province = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'province' field has been set */
    public boolean hasProvince() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'province' field */
    public com.tiger.iplocation.Location.Builder clearProvince() {
      province = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'region' field */
    public java.lang.String getRegion() {
      return region;
    }
    
    /** Sets the value of the 'region' field */
    public com.tiger.iplocation.Location.Builder setRegion(java.lang.String value) {
      validate(fields()[3], value);
      this.region = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'region' field has been set */
    public boolean hasRegion() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'region' field */
    public com.tiger.iplocation.Location.Builder clearRegion() {
      region = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'city' field */
    public java.lang.String getCity() {
      return city;
    }
    
    /** Sets the value of the 'city' field */
    public com.tiger.iplocation.Location.Builder setCity(java.lang.String value) {
      validate(fields()[4], value);
      this.city = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'city' field has been set */
    public boolean hasCity() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'city' field */
    public com.tiger.iplocation.Location.Builder clearCity() {
      city = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'city_level' field */
    public java.lang.String getCityLevel() {
      return city_level;
    }
    
    /** Sets the value of the 'city_level' field */
    public com.tiger.iplocation.Location.Builder setCityLevel(java.lang.String value) {
      validate(fields()[5], value);
      this.city_level = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'city_level' field has been set */
    public boolean hasCityLevel() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'city_level' field */
    public com.tiger.iplocation.Location.Builder clearCityLevel() {
      city_level = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'isp' field */
    public java.lang.String getIsp() {
      return isp;
    }
    
    /** Sets the value of the 'isp' field */
    public com.tiger.iplocation.Location.Builder setIsp(java.lang.String value) {
      validate(fields()[6], value);
      this.isp = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'isp' field has been set */
    public boolean hasIsp() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'isp' field */
    public com.tiger.iplocation.Location.Builder clearIsp() {
      isp = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    public Location build() {
      try {
        Location record = new Location();
        record.geo_code = fieldSetFlags()[0] ? this.geo_code : (java.lang.String) defaultValue(fields()[0]);
        record.country = fieldSetFlags()[1] ? this.country : (java.lang.String) defaultValue(fields()[1]);
        record.province = fieldSetFlags()[2] ? this.province : (java.lang.String) defaultValue(fields()[2]);
        record.region = fieldSetFlags()[3] ? this.region : (java.lang.String) defaultValue(fields()[3]);
        record.city = fieldSetFlags()[4] ? this.city : (java.lang.String) defaultValue(fields()[4]);
        record.city_level = fieldSetFlags()[5] ? this.city_level : (java.lang.String) defaultValue(fields()[5]);
        record.isp = fieldSetFlags()[6] ? this.isp : (java.lang.String) defaultValue(fields()[6]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
